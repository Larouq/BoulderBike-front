{"ast":null,"code":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['exports', 'react', 'prop-types', 'moment', 'left-pad'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports, require('react'), require('prop-types'), require('moment'), require('left-pad'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.react, global.propTypes, global.moment, global.leftPad);\n    global.index = mod.exports;\n  }\n})(this, function (exports, _react, _propTypes, _moment, _leftPad) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  var _react2 = _interopRequireDefault(_react);\n\n  var _propTypes2 = _interopRequireDefault(_propTypes);\n\n  var _moment2 = _interopRequireDefault(_moment);\n\n  var _leftPad2 = _interopRequireDefault(_leftPad);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function _possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  var CountdownText = function (_Component) {\n    _inherits(CountdownText, _Component);\n\n    function CountdownText(props) {\n      _classCallCheck(this, CountdownText);\n\n      var _this = _possibleConstructorReturn(this, (CountdownText.__proto__ || Object.getPrototypeOf(CountdownText)).call(this));\n\n      _this.state = {\n        endDate: props.endDate || (0, _moment2.default)(),\n        countdown: '00:00:00',\n        isExpired: false\n      };\n      return _this;\n    }\n\n    _createClass(CountdownText, [{\n      key: 'componentWillMount',\n      value: function componentWillMount() {\n        var _this2 = this;\n\n        this.tick();\n        this.interval = setInterval(function () {\n          _this2.tick();\n        }, 1e3);\n      }\n    }, {\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        window.clearInterval(this.interval);\n      }\n    }, {\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(props) {\n        this.setState({\n          endDate: props.endDate\n        });\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _state = this.state,\n            countdown = _state.countdown,\n            isExpired = _state.isExpired;\n        return _react2.default.createElement('span', {\n          className: 'ReactCountdownMoment ' + (isExpired ? 'expired' : '')\n        }, countdown);\n      }\n    }, {\n      key: 'tick',\n      value: function tick() {\n        var endDate = this.state.endDate;\n\n        if (!endDate) {\n          this.setState({\n            countdown: '00:00:00'\n          });\n          return false;\n        }\n\n        var now = (0, _moment2.default)();\n        var diff = endDate.diff(now, 'seconds');\n\n        if (diff <= 0) {\n          this.setState({\n            countdown: '00:00:00',\n            isExpired: true\n          });\n          return false;\n        }\n\n        var dur = _moment2.default.duration(diff, 'seconds');\n\n        var countdown = (0, _leftPad2.default)(dur.hours(), 2, 0) + ':' + (0, _leftPad2.default)(dur.minutes(), 2, 0) + ':' + (0, _leftPad2.default)(dur.seconds(), 2, 0);\n        this.setState({\n          countdown: countdown,\n          isExpired: false\n        });\n      }\n    }]);\n\n    return CountdownText;\n  }(_react.Component);\n\n  CountdownText.propTypes = {\n    endDate: _propTypes2.default.object\n  };\n  exports.default = CountdownText;\n});","map":null,"metadata":{},"sourceType":"script"}