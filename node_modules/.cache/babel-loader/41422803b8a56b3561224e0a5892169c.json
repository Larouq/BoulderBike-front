{"ast":null,"code":"import _regeneratorRuntime from \"/Users/adotmob/Desktop/bikerace/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/adotmob/Desktop/bikerace/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nvar BACKEND_API_URL = \"http://localhost:3000\";\nexport var startHerokuVM = function startHerokuVM() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.get();\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var fetchRiders = function fetchRiders() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var res, response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return axios.get(\"\".concat(BACKEND_API_URL, \"/riders\"));\n\n              case 3:\n                res = _context2.sent;\n\n                if (res.status === 200) {\n                  dispatch({\n                    type: fetchRider,\n                    riders: res.data\n                  });\n                }\n\n                _context2.next = 11;\n                break;\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n                response = _context2.t0.response;\n                new Error('backend api failed');\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 7]]);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}; // export const fetchRider = id => async dispatch => {\n//     try {\n//       const res = await axios.get(`${BACKEND_API_URL}/riders/${id}`);\n//       dispatch({\n//         type: fetchRider,\n//         rider: res.data[0]\n//       });\n//     } catch ({ response }) {\n//         new Error('backend api failed')\n//     }\n//   };\n\nexport default {\n  fetchRiders: fetchRiders,\n  startHerokuVM: startHerokuVM\n};","map":{"version":3,"sources":["/Users/adotmob/Desktop/bikerace/src/api/backendApi.js"],"names":["axios","BACKEND_API_URL","startHerokuVM","dispatch","get","fetchRiders","res","status","type","fetchRider","riders","data","response","Error"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,eAAe,GAAG,uBAAxB;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAC3BH,KAAK,CAACI,GAAN,EAD2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;AAIP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,kBAAMF,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEXH,KAAK,CAACI,GAAN,WAAaH,eAAb,aAFW;;AAAA;AAEvBK,gBAAAA,GAFuB;;AAG7B,oBAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtBJ,kBAAAA,QAAQ,CAAC;AAAEK,oBAAAA,IAAI,EAAEC,UAAR;AAAoBC,oBAAAA,MAAM,EAAEJ,GAAG,CAACK;AAAhC,mBAAD,CAAR;AACD;;AAL4B;AAAA;;AAAA;AAAA;AAAA;AAMpBC,gBAAAA,QANoB,gBAMpBA,QANoB;AAO7B,oBAAIC,KAAJ,CAAU,oBAAV;;AAP6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAApB,C,CAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe;AACbR,EAAAA,WAAW,EAAXA,WADa;AACAH,EAAAA,aAAa,EAAbA;AADA,CAAf","sourcesContent":["import axios from \"axios\";\n\nconst BACKEND_API_URL = \"http://localhost:3000\";\n\nexport const startHerokuVM = () => async dispatch => {\n  await axios.get();\n};\n\nexport const fetchRiders = () => async dispatch => {\n  try {\n    const res = await axios.get(`${BACKEND_API_URL}/riders`);\n    if (res.status === 200) {\n      dispatch({ type: fetchRider, riders: res.data });\n    }\n  } catch ({ response }) {\n    new Error('backend api failed')\n  }\n};\n\n// export const fetchRider = id => async dispatch => {\n//     try {\n//       const res = await axios.get(`${BACKEND_API_URL}/riders/${id}`);\n//       dispatch({\n//         type: fetchRider,\n//         rider: res.data[0]\n//       });\n//     } catch ({ response }) {\n//         new Error('backend api failed')\n//     }\n//   };\n\nexport default {\n  fetchRiders, startHerokuVM\n};\n"]},"metadata":{},"sourceType":"module"}