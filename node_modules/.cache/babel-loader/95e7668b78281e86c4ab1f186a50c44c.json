{"ast":null,"code":"var _toConsumableArray = require(\"/Users/adotmob/Documents/opc/boulderBike/bikerace/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/adotmob/Documents/opc/boulderBike/bikerace/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/adotmob/Documents/opc/boulderBike/bikerace/node_modules/@babel/runtime/helpers/createClass\");\n\nvar localList = require('./lang.json').words;\n\nvar baseList = require('badwords-list').array;\n\nvar Filter =\n/*#__PURE__*/\nfunction () {\n  \"use strict\";\n\n  /**\n   * Filter constructor.\n   * @constructor\n   * @param {object} options - Filter instance options\n   * @param {boolean} options.emptyList - Instantiate filter with no blacklist\n   * @param {array} options.list - Instantiate filter with custom list\n   * @param {string} options.placeHolder - Character used to replace profane words.\n   * @param {string} options.regex - Regular expression used to sanitize words before comparing them to blacklist.\n   * @param {string} options.replaceRegex - Regular expression used to replace profane words with placeHolder.\n   */\n  function Filter() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Filter);\n\n    Object.assign(this, {\n      list: options.emptyList && [] || Array.prototype.concat.apply(localList, [baseList, options.list || []]),\n      exclude: options.exclude || [],\n      placeHolder: options.placeHolder || '*',\n      regex: options.regex || /[^a-zA-Z0-9|\\$|\\@]|\\^/g,\n      replaceRegex: options.replaceRegex || /\\w/g\n    });\n  }\n  /**\n   * Determine if a string contains profane language.\n   * @param {string} string - String to evaluate for profanity.\n   */\n\n\n  _createClass(Filter, [{\n    key: \"isProfane\",\n    value: function isProfane(string) {\n      var _this = this;\n\n      return this.list.filter(function (word) {\n        var wordExp = new RegExp(\"\\\\b\".concat(word.replace(/(\\W)/g, '\\\\$1'), \"\\\\b\"), 'gi');\n        return !_this.exclude.includes(word.toLowerCase()) && wordExp.test(string);\n      }).length > 0 || false;\n    }\n    /**\n     * Replace a word with placeHolder characters;\n     * @param {string} string - String to replace.\n     */\n\n  }, {\n    key: \"replaceWord\",\n    value: function replaceWord(string) {\n      return string.replace(this.regex, '').replace(this.replaceRegex, this.placeHolder);\n    }\n    /**\n     * Evaluate a string for profanity and return an edited version.\n     * @param {string} string - Sentence to filter.\n     */\n\n  }, {\n    key: \"clean\",\n    value: function clean(string) {\n      var _this2 = this;\n\n      return string.split(/\\b/).map(function (word) {\n        return _this2.isProfane(word) ? _this2.replaceWord(word) : word;\n      }).join('');\n    }\n    /**\n     * Add word(s) to blacklist filter / remove words from whitelist filter\n     * @param {...string} word - Word(s) to add to blacklist\n     */\n\n  }, {\n    key: \"addWords\",\n    value: function addWords() {\n      var _this$list,\n          _this3 = this;\n\n      var words = Array.from(arguments);\n\n      (_this$list = this.list).push.apply(_this$list, _toConsumableArray(words));\n\n      words.map(function (word) {\n        return word.toLowerCase();\n      }).forEach(function (word) {\n        if (_this3.exclude.includes(word)) {\n          _this3.exclude.splice(_this3.exclude.indexOf(word), 1);\n        }\n      });\n    }\n    /**\n     * Add words to whitelist filter\n     * @param {...string} word - Word(s) to add to whitelist.\n     */\n\n  }, {\n    key: \"removeWords\",\n    value: function removeWords() {\n      var _this$exclude;\n\n      (_this$exclude = this.exclude).push.apply(_this$exclude, _toConsumableArray(Array.from(arguments).map(function (word) {\n        return word.toLowerCase();\n      })));\n    }\n  }]);\n\n  return Filter;\n}();\n\nmodule.exports = Filter;","map":null,"metadata":{},"sourceType":"script"}