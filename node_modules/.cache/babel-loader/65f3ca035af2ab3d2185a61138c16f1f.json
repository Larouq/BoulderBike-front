{"ast":null,"code":"import _regeneratorRuntime from \"/Users/adotmob/Desktop/bikerace/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/adotmob/Desktop/bikerace/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nvar BACKEND_API_URL = \"http://localhost:3000\";\nexport var startHerokuVM = function startHerokuVM() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.get();\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport function fetchRiders() {\n  return _fetchRiders.apply(this, arguments);\n}\n\nfunction _fetchRiders() {\n  _fetchRiders = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    var results;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return axios.get(\"\".concat(BACKEND_API_URL, \"/riders\"));\n\n          case 3:\n            results = _context2.sent;\n            return _context2.abrupt(\"return\", results.data);\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            new Error(\"backend API request failed.\");\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 7]]);\n  }));\n  return _fetchRiders.apply(this, arguments);\n}\n\n; // export const submitSponsorship = form => async dispatch => {\n//   dispatch({ type: PENDING_SPONSORSHIP });\n//   try {\n//     const params = {\n//       first_name: form.firstName,\n//       last_name: form.lastName,\n//       email: form.email,\n//       slogan: form.slogan\n//     };\n//     const res = await axios.post(`${API_URL}/submissions`, params);\n//     if (res.status === 200) {\n//       dispatch({ type: SUCCESS_SPONSORSHIP });\n//     }\n//   } catch ({ response }) {\n//     dispatch({ type: ERROR_SPONSORSHIP });\n//   }\n// };\n\nexport function submitSponsorship(_x2) {\n  return _submitSponsorship.apply(this, arguments);\n}\n\nfunction _submitSponsorship() {\n  _submitSponsorship = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(from) {\n    var params;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            try {\n              params = {\n                first_name: form.firstName,\n                last_name: form.lastName,\n                email: form.email,\n                slogan: form.slogan\n              };\n            } catch (error) {\n              new Error(\"backend API request failed.\");\n            }\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _submitSponsorship.apply(this, arguments);\n}\n\nexport default {\n  fetchRiders: fetchRiders,\n  startHerokuVM: startHerokuVM\n};","map":{"version":3,"sources":["/Users/adotmob/Desktop/bikerace/src/api/backendApi.js"],"names":["axios","BACKEND_API_URL","startHerokuVM","dispatch","get","fetchRiders","results","data","Error","submitSponsorship","from","params","first_name","form","firstName","last_name","lastName","email","slogan","error"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,eAAe,GAAG,uBAAxB;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAC3BH,KAAK,CAACI,GAAN,EAD2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;AAIP,gBAAsBC,WAAtB;AAAA;AAAA;;;;;2BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEmBL,KAAK,CAACI,GAAN,WAAaH,eAAb,aAFnB;;AAAA;AAEGK,YAAAA,OAFH;AAAA,8CAGIA,OAAO,CAACC,IAHZ;;AAAA;AAAA;AAAA;AAOH,gBAAIC,KAAJ,CAAU,6BAAV;;AAPG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AASN,C,CAED;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAsBC,iBAAtB;AAAA;AAAA;;;;;2BAAO,kBAAiCC,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,gBAAI;AACIC,cAAAA,MADJ,GACa;AACbC,gBAAAA,UAAU,EAAEC,IAAI,CAACC,SADJ;AAEbC,gBAAAA,SAAS,EAAEF,IAAI,CAACG,QAFH;AAGbC,gBAAAA,KAAK,EAAEJ,IAAI,CAACI,KAHC;AAIbC,gBAAAA,MAAM,EAAEL,IAAI,CAACK;AAJA,eADb;AAOH,aAPD,CAOE,OAAOC,KAAP,EAAc;AACd,kBAAIX,KAAJ,CAAU,6BAAV;AACD;;AAVI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAaP,eAAe;AACbH,EAAAA,WAAW,EAAXA,WADa;AACAH,EAAAA,aAAa,EAAbA;AADA,CAAf","sourcesContent":["import axios from \"axios\";\n\nconst BACKEND_API_URL = \"http://localhost:3000\";\n\nexport const startHerokuVM = () => async dispatch => {\n  await axios.get();\n};\n\nexport async function fetchRiders() {\n  try {\n    const results = await axios.get(`${BACKEND_API_URL}/riders`)\n    return results.data\n  }\n\n  catch (error) {\n    new Error(\"backend API request failed.\")\n  }\n};\n\n// export const submitSponsorship = form => async dispatch => {\n//   dispatch({ type: PENDING_SPONSORSHIP });\n\n//   try {\n//     const params = {\n//       first_name: form.firstName,\n//       last_name: form.lastName,\n//       email: form.email,\n//       slogan: form.slogan\n//     };\n//     const res = await axios.post(`${API_URL}/submissions`, params);\n//     if (res.status === 200) {\n//       dispatch({ type: SUCCESS_SPONSORSHIP });\n//     }\n//   } catch ({ response }) {\n//     dispatch({ type: ERROR_SPONSORSHIP });\n//   }\n// };\n\nexport async function submitSponsorship(from) {\n  try {\n    const params = {\n      first_name: form.firstName,\n      last_name: form.lastName,\n      email: form.email,\n      slogan: form.slogan\n    }\n  } catch (error) {\n    new Error(\"backend API request failed.\")\n  }\n}\n\nexport default {\n  fetchRiders, startHerokuVM\n};\n"]},"metadata":{},"sourceType":"module"}