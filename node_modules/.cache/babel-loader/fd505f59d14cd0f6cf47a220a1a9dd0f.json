{"ast":null,"code":"import _objectSpread from \"/Users/adotmob/Desktop/bikerace/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport axios from \"axios\";\nimport Filter from \"bad-words\";\nimport striptags from \"striptags\";\nvar filter = new Filter();\nvar API_URL = \"https://api.flickr.com/services/rest/\";\nvar DEFAULT_PARAMS = {\n  api_key: 'fbb18c11c83de0d21ee27d456e828586',\n  safe_search: 1,\n  per_page: 40,\n  format: \"json\",\n  nojsoncallback: 1,\n  page: 1,\n  extras: \"owner_name,description,tags\"\n};\n\nif (!process.env.REACT_APP_FLICKR_API_KEY) {\n  console.error(\"No Flickr API key found. Please refer to documentation.\");\n}\n/**\n * Returns Flickr photo URL based on the photo's ID and CDN attributes.\n * @param {Object} photo Flickr photo object\n * @return String Photo URL\n */\n\n\nfunction getPhotoURL(photo) {\n  var id = photo.id,\n      farm = photo.farm,\n      secret = photo.secret,\n      server = photo.server;\n  return \"https://farm\".concat(farm, \".staticflickr.com/\").concat(server, \"/\").concat(id, \"_\").concat(secret, \".jpg\");\n}\n/**\n * Returns Flickr photo URL for the author, based on the photo's ID and CDN attributes.\n * @param {Object} photo Flickr photo object\n * @return String Author URL\n */\n\n\nfunction getAuthorURL(photo) {\n  return \"https://www.flickr.com/people/\".concat(photo.owner, \"/\");\n}\n/**\n * Returns latest photos from public Flickr feed.\n * @param {string} [tags] Tags to filter by.\n * @return Promise\n */\n\n\nexport function fetchPhotos() {\n  var tags = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  var page = arguments.length > 1 ? arguments[1] : undefined;\n  // Search does not support parameterless searching, in which case we fall back to getRecent.\n  var method = !!tags ? \"flickr.photos.search\" : 'flickr.photos.getRecent';\n\n  var params = _objectSpread({}, DEFAULT_PARAMS, {\n    method: method,\n    tags: 'bikerace'\n  });\n\n  return axios.get(API_URL, {\n    params: params\n  }).then(function (_ref) {\n    var data = _ref.data;\n\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(\"Fetched photos \", data);\n    }\n\n    if (data.stat === \"fail\" || !data.photos) {\n      throw new Error(\"Flickr request failed.\");\n    }\n\n    var photos = data.photos.photo || []; // In this demo we're filtering out photos that _might_ be NSFW. The \"safe\" flag is\n    // set by the user and not entirely reliable.\n\n    return photos.filter(function (item) {\n      return !filter.isProfane(item.title);\n    }).map(function (item) {\n      item.description._content = striptags(item.description._content);\n      item.photoURL = getPhotoURL(item);\n      item.authorURL = getAuthorURL(item);\n      return item;\n    });\n  });\n}\nexport default {\n  fetchPhotos: fetchPhotos\n};","map":{"version":3,"sources":["/Users/adotmob/Desktop/bikerace/src/api/api.js"],"names":["axios","Filter","striptags","filter","API_URL","DEFAULT_PARAMS","api_key","safe_search","per_page","format","nojsoncallback","page","extras","process","env","REACT_APP_FLICKR_API_KEY","console","error","getPhotoURL","photo","id","farm","secret","server","getAuthorURL","owner","fetchPhotos","tags","method","params","get","then","data","NODE_ENV","log","stat","photos","Error","item","isProfane","title","map","description","_content","photoURL","authorURL"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,IAAMC,MAAM,GAAG,IAAIF,MAAJ,EAAf;AACA,IAAMG,OAAO,GAAG,uCAAhB;AAEA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAE,kCADY;AAErBC,EAAAA,WAAW,EAAE,CAFQ;AAGrBC,EAAAA,QAAQ,EAAE,EAHW;AAIrBC,EAAAA,MAAM,EAAE,MAJa;AAKrBC,EAAAA,cAAc,EAAE,CALK;AAMrBC,EAAAA,IAAI,EAAE,CANe;AAOrBC,EAAAA,MAAM,EAAE;AAPa,CAAvB;;AAUA,IAAI,CAACC,OAAO,CAACC,GAAR,CAAYC,wBAAjB,EAA2C;AACzCC,EAAAA,OAAO,CAACC,KAAR,CAAc,yDAAd;AACD;AAED;;;;;;;AAKA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA,MAClBC,EADkB,GACWD,KADX,CAClBC,EADkB;AAAA,MACdC,IADc,GACWF,KADX,CACdE,IADc;AAAA,MACRC,MADQ,GACWH,KADX,CACRG,MADQ;AAAA,MACAC,MADA,GACWJ,KADX,CACAI,MADA;AAG1B,+BAAsBF,IAAtB,+BAA+CE,MAA/C,cAAyDH,EAAzD,cAA+DE,MAA/D;AACD;AAED;;;;;;;AAKA,SAASE,YAAT,CAAsBL,KAAtB,EAA6B;AAC3B,iDAAwCA,KAAK,CAACM,KAA9C;AACD;AAED;;;;;;;AAKA,OAAO,SAASC,WAAT,GAAsC;AAAA,MAAjBC,IAAiB,uEAAV,EAAU;AAAA,MAANhB,IAAM;AAC3C;AACA,MAAMiB,MAAM,GAAG,CAAC,CAACD,IAAF,GAAS,sBAAT,GAAkC,yBAAjD;;AAEA,MAAME,MAAM,qBACPxB,cADO;AAEVuB,IAAAA,MAAM,EAANA,MAFU;AAGVD,IAAAA,IAAI,EAAE;AAHI,IAAZ;;AAMA,SAAO3B,KAAK,CAAC8B,GAAN,CAAU1B,OAAV,EAAmB;AAAEyB,IAAAA,MAAM,EAANA;AAAF,GAAnB,EAA+BE,IAA/B,CAAoC,gBAAc;AAAA,QAAXC,IAAW,QAAXA,IAAW;;AACvD,QAAInB,OAAO,CAACC,GAAR,CAAYmB,QAAZ,KAAyB,aAA7B,EAA4C;AAC1CjB,MAAAA,OAAO,CAACkB,GAAR,CAAY,iBAAZ,EAA+BF,IAA/B;AACD;;AAED,QAAIA,IAAI,CAACG,IAAL,KAAc,MAAd,IAAwB,CAACH,IAAI,CAACI,MAAlC,EAA0C;AACxC,YAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,QAAMD,MAAM,GAAGJ,IAAI,CAACI,MAAL,CAAYjB,KAAZ,IAAqB,EAApC,CATuD,CAWvD;AACA;;AACA,WAAOiB,MAAM,CACVjC,MADI,CACG,UAAAmC,IAAI;AAAA,aAAI,CAACnC,MAAM,CAACoC,SAAP,CAAiBD,IAAI,CAACE,KAAtB,CAAL;AAAA,KADP,EAEJC,GAFI,CAEA,UAAAH,IAAI,EAAI;AACXA,MAAAA,IAAI,CAACI,WAAL,CAAiBC,QAAjB,GAA4BzC,SAAS,CAACoC,IAAI,CAACI,WAAL,CAAiBC,QAAlB,CAArC;AACAL,MAAAA,IAAI,CAACM,QAAL,GAAgB1B,WAAW,CAACoB,IAAD,CAA3B;AACAA,MAAAA,IAAI,CAACO,SAAL,GAAiBrB,YAAY,CAACc,IAAD,CAA7B;AACA,aAAOA,IAAP;AACD,KAPI,CAAP;AAQD,GArBM,CAAP;AAsBD;AAED,eAAe;AACbZ,EAAAA,WAAW,EAAXA;AADa,CAAf","sourcesContent":["import axios from \"axios\";\nimport Filter from \"bad-words\";\nimport striptags from \"striptags\";\n\nconst filter = new Filter();\nconst API_URL = \"https://api.flickr.com/services/rest/\";\n\nconst DEFAULT_PARAMS = {\n  api_key: 'fbb18c11c83de0d21ee27d456e828586',\n  safe_search: 1,\n  per_page: 40,\n  format: \"json\",\n  nojsoncallback: 1,\n  page: 1,\n  extras: \"owner_name,description,tags\"\n};\n\nif (!process.env.REACT_APP_FLICKR_API_KEY) {\n  console.error(\"No Flickr API key found. Please refer to documentation.\");\n}\n\n/**\n * Returns Flickr photo URL based on the photo's ID and CDN attributes.\n * @param {Object} photo Flickr photo object\n * @return String Photo URL\n */\nfunction getPhotoURL(photo) {\n  const { id, farm, secret, server } = photo;\n\n  return `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`;\n}\n\n/**\n * Returns Flickr photo URL for the author, based on the photo's ID and CDN attributes.\n * @param {Object} photo Flickr photo object\n * @return String Author URL\n */\nfunction getAuthorURL(photo) {\n  return `https://www.flickr.com/people/${photo.owner}/`;\n}\n\n/**\n * Returns latest photos from public Flickr feed.\n * @param {string} [tags] Tags to filter by.\n * @return Promise\n */\nexport function fetchPhotos(tags = \"\", page) {\n  // Search does not support parameterless searching, in which case we fall back to getRecent.\n  const method = !!tags ? \"flickr.photos.search\" : 'flickr.photos.getRecent';\n\n  const params = {\n    ...DEFAULT_PARAMS,\n    method,\n    tags: 'bikerace'\n  };\n\n  return axios.get(API_URL, { params }).then(({ data }) => {\n    if (process.env.NODE_ENV === \"development\") {\n      console.log(\"Fetched photos \", data);\n    }\n\n    if (data.stat === \"fail\" || !data.photos) {\n      throw new Error(\"Flickr request failed.\");\n    }\n\n    const photos = data.photos.photo || [];\n\n    // In this demo we're filtering out photos that _might_ be NSFW. The \"safe\" flag is\n    // set by the user and not entirely reliable.\n    return photos\n      .filter(item => !filter.isProfane(item.title))\n      .map(item => {\n        item.description._content = striptags(item.description._content);\n        item.photoURL = getPhotoURL(item);\n        item.authorURL = getAuthorURL(item);\n        return item;\n      });\n  });\n}\n\nexport default {\n  fetchPhotos\n};\n"]},"metadata":{},"sourceType":"module"}