{"ast":null,"code":"import _regeneratorRuntime from \"/Users/adotmob/Desktop/bikerace/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/adotmob/Desktop/bikerace/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from \"axios\";\nvar BACKEND_API_URL = \"http://localhost:3000\";\nexport var startHerokuVM = function startHerokuVM() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return axios.get();\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport function fetchRiders() {\n  return _fetchRiders.apply(this, arguments);\n}\n\nfunction _fetchRiders() {\n  _fetchRiders = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", fetch(\"http://localhost:3000/riders\").then(function (response) {\n              return response.json();\n            }).then(function (data) {\n              return data;\n            }));\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fetchRiders.apply(this, arguments);\n}\n\n;\nexport default {\n  fetchRiders: fetchRiders,\n  startHerokuVM: startHerokuVM\n};","map":{"version":3,"sources":["/Users/adotmob/Desktop/bikerace/src/api/backendApi.js"],"names":["axios","BACKEND_API_URL","startHerokuVM","dispatch","get","fetchRiders","fetch","then","response","json","data"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,eAAe,GAAG,uBAAxB;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAM,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAC3BH,KAAK,CAACI,GAAN,EAD2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAtB;AAIP,gBAAsBC,WAAtB;AAAA;AAAA;;;;;2BAAO;AAAA;AAAA;AAAA;AAAA;AAAA,8CACEC,KAAK,CAAC,8BAAD,CAAL,CACNC,IADM,CACD,UAAAC,QAAQ;AAAA,qBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,aADP,EAENF,IAFM,CAED,UAAAG,IAAI,EAAI;AACZ,qBAAOA,IAAP;AACD,aAJM,CADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAkBN;AAED,eAAe;AACbL,EAAAA,WAAW,EAAXA,WADa;AACAH,EAAAA,aAAa,EAAbA;AADA,CAAf","sourcesContent":["import axios from \"axios\";\n\nconst BACKEND_API_URL = \"http://localhost:3000\";\n\nexport const startHerokuVM = () => async dispatch => {\n  await axios.get();\n};\n\nexport async function fetchRiders() {\n  return(fetch(\"http://localhost:3000/riders\")\n  .then(response => response.json())\n  .then(data => {\n    return data\n  }))\n  // try {\n  // const res = await axios.get(`${BACKEND_API_URL}/riders`);\n  // axios.get(`${BACKEND_API_URL}/riders`).then((dqtq) =>{\n  //   console.log(dqtq)\n  // } )\n    \n  //   if (res.status === 200) {\n  //     return dispatch({ type: fetchRider, riders: res.data });\n  //   }\n  // } catch ({ response }) {\n  //   new Error('backend api failed')\n  // }\n};\n\nexport default {\n  fetchRiders, startHerokuVM\n};\n"]},"metadata":{},"sourceType":"module"}